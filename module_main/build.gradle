if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-kapt'

//准备Java，kotlin 混合开发
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        if (isModule.toBoolean()) {
            applicationId "com.zenglb.framework.module_main"
        }

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //支持VectorDrawable
        vectorDrawables.useSupportLibrary = true

        //配置使用ARouter
//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [AROUTER_MODULE_NAME: project.getName()]
//            }
//        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        //设置支持的SO abi库架构支持
//        ndk {
//            abiFilters 'armeabi-v7a'
//        }
    }


    sourceSets {
        main {
            if (isModule.toBoolean()) {
                //组件开发模式下排除debug文件夹中的所有Java文件
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            }
        }
    }


    buildTypes {

        debug {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro' //proguard-rules.pro文件用于添加自定义 ProGuard 规则
        }

        release {
            //ProGuard规则文件
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro' //proguard-rules.pro文件用于添加自定义 ProGuard 规则
        }

    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    implementation project(':baselib')

    //Dagger for kotlin
    kapt 'com.google.dagger:dagger-compiler:2.24'      // Dagger 2 注解处理
    kapt 'com.google.dagger:dagger-android-processor:2.24' // Dagger 2 注解处理 Android 支持

    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'     //Platform bindings
    implementation 'com.jakewharton.rxbinding2:rxbinding-support-v4:2.0.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0'

    implementation 'anylife.downloadinstaller:downloadInstaller:1.1.1'
    implementation 'com.zhihu.android:matisse:0.4.3'  //图片视频选择，不要再用PhotoPicker 了
    
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"

}
